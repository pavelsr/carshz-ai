#!/usr/bin/env python3
# File to folder
# We are not using argparse to be able to run any cmd
import os
import sys
import subprocess
from pathlib import Path

import logging
logging.basicConfig(level=logging.DEBUG)

'''
Add support of folder processing if there is no

E.g. convert command 

transparent-background -s img-samples -d results

into list of 

transparent-background -s img-samples/01.jpg -d results/01.jpg
transparent-background -s img-samples/02.jpg -d results/02.jpg

etc

Use it as wrapper

./f2f transparent-background -s img-samples-1 -d results
'''

# For root of following project:

verbose = True
is_dest_folder = True
new_suffix = ".png"
in_folder = {}
out_folder = {}

# defaults for transparent-background
in_folder["key"] = os.getenv('F2F_IN_FOLDER_ARGV', default = '-s')
out_folder["key"] = os.getenv('F2F_OUT_FOLDER_ARGV', default = '-d')

def list_files_recursively(folder_path):
    file_list = []
    if verbose:
        print("Getting files of {} folder ... ".format(folder_path))
    for dirpath, _, filenames in os.walk(folder_path):
        #print(dirpath, dirnames, filenames)
        for filename in filenames:
            file_list.append(os.path.join(dirpath, filename))
    file_list.sort()
    return file_list

def replace_first_folder(path, new_folder):
    parts = path.split(os.sep)
    parts[0] = new_folder
    new_path = os.sep.join(parts)
    return new_path

# argv = sys.argv[1:]
argv = sys.argv

if not in_folder["key"] in argv and out_folder["key"] in argv:
    raise Exception('Please double check that you specified correct in_folder_key and out_folder_key')

in_folder["argv_idx"] = argv.index(in_folder["key"]) + 1
out_folder["argv_idx"] = argv.index(out_folder["key"]) + 1

in_folder["val"] = argv[in_folder["argv_idx"]]
out_folder["val"] = argv[out_folder["argv_idx"]]

if verbose:
    print(argv)
    print("in_folder: ", in_folder, "\n", "out folder : ", out_folder)

target_files = list_files_recursively(in_folder["val"])
total = len(target_files)

for idx, file in enumerate(target_files):
    # replace folder to files
    argv[in_folder["argv_idx"]] = file
    
    if is_dest_folder:
        # leave just filename
        base_path = os.path.dirname(file)
        argv[out_folder["argv_idx"]] = replace_first_folder(base_path,out_folder["val"])
    else:
        # leave file-by-file, but replace jpg to png
        argv[out_folder["argv_idx"]] = replace_first_folder(Path(file).with_suffix(new_suffix),out_folder["val"])
    cmd = argv[1:]
    log_msg = "F2F {}/{} {}".format(idx+1, total, " ".join(cmd))
    print(log_msg)
    #subprocess.run(cmd)
    subprocess.run(cmd)
